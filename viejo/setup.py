#!/usr/bin/env python3
"""
Script de configuraciÃ³n e instalaciÃ³n del proyecto de detecciÃ³n de clickbait
"""

import subprocess
import sys
import os
from pathlib import Path

def install_requirements():
    """
    Instalar dependencias del proyecto
    """
    print("Instalando dependencias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("âœ“ Dependencias instaladas exitosamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"âœ— Error instalando dependencias: {e}")
        return False

def setup_nltk():
    """
    Configurar datos de NLTK
    """
    print("Configurando NLTK...")
    try:
        import nltk
        nltk.download('punkt', quiet=True)
        nltk.download('stopwords', quiet=True)
        print("âœ“ NLTK configurado")
        return True
    except Exception as e:
        print(f"âœ— Error configurando NLTK: {e}")
        return False

def create_directories():
    """
    Crear directorios necesarios
    """
    print("Creando directorios...")
    directories = ['data', 'results', 'plots']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    print("âœ“ Directorios creados")
    return True

def verify_installation():
    """
    Verificar que la instalaciÃ³n fue exitosa
    """
    print("Verificando instalaciÃ³n...")
    required_packages = [
        'pandas', 'numpy', 'sklearn', 'nltk', 
        'matplotlib', 'seaborn'
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"âœ— Paquetes faltantes: {missing_packages}")
        return False
    else:
        print("âœ“ InstalaciÃ³n verificada")
        return True

def run_quick_test():
    """
    Ejecutar una prueba rÃ¡pida del proyecto
    """
    print("Ejecutando prueba rÃ¡pida...")
    try:
        # Importar mÃ³dulos principales
        from clickbait_detection import ClickbaitDetector
        from download_dataset import create_sample_dataset
        
        # Crear dataset de muestra
        dataset_path = create_sample_dataset()
        
        # Inicializar detector
        detector = ClickbaitDetector()
        
        # Cargar y preprocesar datos
        import pandas as pd
        df = pd.read_csv(dataset_path)
        df['processed_text'] = df['headline'].apply(detector.preprocess_text)
        
        print("âœ“ Prueba rÃ¡pida exitosa")
        return True
    except Exception as e:
        print(f"âœ— Error en prueba rÃ¡pida: {e}")
        return False

def main():
    """
    FunciÃ³n principal de configuraciÃ³n
    """
    print("CONFIGURACIÃ“N DEL PROYECTO DE DETECCIÃ“N DE CLICKBAIT")
    print("="*60)
    
    steps = [
        ("Instalando dependencias", install_requirements),
        ("Configurando NLTK", setup_nltk),
        ("Creando directorios", create_directories),
        ("Verificando instalaciÃ³n", verify_installation),
        ("Ejecutando prueba rÃ¡pida", run_quick_test)
    ]
    
    for step_name, step_function in steps:
        print(f"\n{step_name}...")
        if not step_function():
            print(f"âœ— Error en: {step_name}")
            return False
    
    print("\n" + "="*60)
    print("ðŸŽ‰ CONFIGURACIÃ“N COMPLETADA EXITOSAMENTE!")
    print("="*60)
    print("\nPara ejecutar el proyecto:")
    print("  python main.py")
    print("\nPara anÃ¡lisis interactivo:")
    print("  jupyter notebook clickbait_analysis.ipynb")
    print("\nPara experimentos de embeddings:")
    print("  python embeddings_experiment.py")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
