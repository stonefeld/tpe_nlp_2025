#!/usr/bin/env python3
"""
Script de configuraci√≥n e instalaci√≥n del proyecto usando uv
"""

import subprocess
import sys
import os
from pathlib import Path

def check_uv_installed():
    """
    Verificar si uv est√° instalado
    """
    try:
        subprocess.run(["uv", "--version"], capture_output=True, check=True)
        print("‚úì uv est√° instalado")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚úó uv no est√° instalado")
        print("Instala uv con: curl -LsSf https://astral.sh/uv/install.sh | sh")
        return False

def install_dependencies():
    """
    Instalar dependencias b√°sicas con uv
    """
    print("Instalando dependencias b√°sicas...")
    try:
        subprocess.check_call(["uv", "sync"])
        print("‚úì Dependencias b√°sicas instaladas")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó Error instalando dependencias: {e}")
        return False

def install_optional_dependencies():
    """
    Instalar dependencias opcionales
    """
    print("Instalando dependencias opcionales...")
    
    # Embeddings (Word2Vec, BERT, etc.)
    try:
        subprocess.check_call(["uv", "sync", "--extra", "embeddings"])
        print("‚úì Dependencias de embeddings instaladas")
    except subprocess.CalledProcessError as e:
        print(f"‚ö† No se pudieron instalar dependencias de embeddings: {e}")
    
    # Kaggle (opcional)
    try:
        subprocess.check_call(["uv", "sync", "--extra", "kaggle"])
        print("‚úì Dependencias de Kaggle instaladas")
    except subprocess.CalledProcessError as e:
        print(f"‚ö† No se pudieron instalar dependencias de Kaggle: {e}")

def setup_nltk():
    """
    Configurar datos de NLTK
    """
    print("Configurando NLTK...")
    try:
        # Ejecutar con el entorno de uv
        subprocess.check_call([
            "uv", "run", "python", "-c", 
            "import nltk; nltk.download('punkt'); nltk.download('stopwords')"
        ])
        print("‚úì NLTK configurado")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó Error configurando NLTK: {e}")
        return False

def create_directories():
    """
    Crear directorios necesarios
    """
    print("Creando directorios...")
    directories = ['data', 'results', 'plots']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    print("‚úì Directorios creados")
    return True

def verify_installation():
    """
    Verificar que la instalaci√≥n fue exitosa
    """
    print("Verificando instalaci√≥n...")
    try:
        subprocess.check_call([
            "uv", "run", "python", "-c",
            "import pandas, numpy, sklearn, nltk, matplotlib, seaborn; print('‚úì Todas las dependencias est√°n disponibles')"
        ])
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó Error verificando instalaci√≥n: {e}")
        return False

def run_quick_test():
    """
    Ejecutar una prueba r√°pida del proyecto
    """
    print("Ejecutando prueba r√°pida...")
    try:
        subprocess.check_call([
            "uv", "run", "python", "-c",
            """
from clickbait_detection import ClickbaitDetector
from download_dataset import create_sample_dataset
import pandas as pd

# Crear dataset de muestra
dataset_path = create_sample_dataset()

# Inicializar detector
detector = ClickbaitDetector()

# Cargar y preprocesar datos
df = pd.read_csv(dataset_path)
df['processed_text'] = df['headline'].apply(detector.preprocess_text)

print('‚úì Prueba r√°pida exitosa')
            """
        ])
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó Error en prueba r√°pida: {e}")
        return False

def create_uv_scripts():
    """
    Crear scripts de conveniencia para uv
    """
    print("Creando scripts de conveniencia...")
    
    # Script para ejecutar el an√°lisis principal
    with open("run_analysis.py", "w") as f:
        f.write('''#!/usr/bin/env python3
"""
Script para ejecutar el an√°lisis principal con uv
"""
import subprocess
import sys

def main():
    try:
        subprocess.check_call(["uv", "run", "python", "main.py"])
    except subprocess.CalledProcessError as e:
        print(f"Error ejecutando an√°lisis: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
''')
    
    # Script para ejecutar la demostraci√≥n
    with open("run_demo.py", "w") as f:
        f.write('''#!/usr/bin/env python3
"""
Script para ejecutar la demostraci√≥n con uv
"""
import subprocess
import sys

def main():
    try:
        subprocess.check_call(["uv", "run", "python", "demo.py"])
    except subprocess.CalledProcessError as e:
        print(f"Error ejecutando demostraci√≥n: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
''')
    
    # Script para ejecutar experimentos de embeddings
    with open("run_embeddings.py", "w") as f:
        f.write('''#!/usr/bin/env python3
"""
Script para ejecutar experimentos de embeddings con uv
"""
import subprocess
import sys

def main():
    try:
        subprocess.check_call(["uv", "run", "python", "embeddings_experiment.py"])
    except subprocess.CalledProcessError as e:
        print(f"Error ejecutando experimentos de embeddings: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
''')
    
    # Hacer los scripts ejecutables
    for script in ["run_analysis.py", "run_demo.py", "run_embeddings.py"]:
        os.chmod(script, 0o755)
    
    print("‚úì Scripts de conveniencia creados")

def main():
    """
    Funci√≥n principal de configuraci√≥n con uv
    """
    print("CONFIGURACI√ìN DEL PROYECTO CON UV")
    print("="*50)
    
    steps = [
        ("Verificando uv", check_uv_installed),
        ("Creando directorios", create_directories),
        ("Instalando dependencias b√°sicas", install_dependencies),
        ("Instalando dependencias opcionales", install_optional_dependencies),
        ("Configurando NLTK", setup_nltk),
        ("Verificando instalaci√≥n", verify_installation),
        ("Creando scripts de conveniencia", create_uv_scripts),
        ("Ejecutando prueba r√°pida", run_quick_test)
    ]
    
    for step_name, step_function in steps:
        print(f"\n{step_name}...")
        if not step_function():
            if step_name == "Verificando uv":
                return False
            print(f"‚ö† Continuando sin: {step_name}")
    
    print("\n" + "="*50)
    print("üéâ CONFIGURACI√ìN CON UV COMPLETADA!")
    print("="*50)
    print("\nComandos disponibles:")
    print("  uv run python main.py              # An√°lisis completo")
    print("  uv run python demo.py              # Demostraci√≥n interactiva")
    print("  uv run python embeddings_experiment.py  # Experimentos de embeddings")
    print("  uv run jupyter notebook clickbait_analysis.ipynb  # An√°lisis interactivo")
    print("\nScripts de conveniencia:")
    print("  python run_analysis.py             # An√°lisis completo")
    print("  python run_demo.py                 # Demostraci√≥n")
    print("  python run_embeddings.py           # Experimentos de embeddings")
    print("\nPara instalar dependencias adicionales:")
    print("  uv sync --extra embeddings         # Para Word2Vec, BERT, etc.")
    print("  uv sync --extra kaggle             # Para descargar datasets de Kaggle")
    print("  uv sync --extra dev                # Para desarrollo")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
